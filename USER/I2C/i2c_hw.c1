#include "i2c_core.h"
#include "i2c_bitops.h"
#include "bsp_delay.h"

/********************eg: stm32f1 simulate i2c start*******************/
#define	I2C1_SDA_PORT	GPIOB
#define	I2C1_SCL_PORT	GPIOB
#define	I2C1_SDA_PIN	GPIO_Pin_7
#define	I2C1_SCL_PIN	GPIO_Pin_6

/* i2c1 device */
struct i2c_dev_device i2c1_dev;
struct ops_i2c_dev ops_i2c1_dev;

/* i2c1 diver */
static void gpio_set_sda(int8_t state)
{
	if(state)
	{
		I2C1_SDA_PORT->BSRR = I2C1_SDA_PIN;
	}
	else
	{
		I2C1_SDA_PORT->BRR = I2C1_SDA_PIN;
	}
}

static void gpio_set_scl(int8_t state)
{
	if (state)
	{	
		I2C1_SCL_PORT->BSRR = I2C1_SCL_PIN;
	}
	else
	{	
		I2C1_SCL_PORT->BRR = I2C1_SCL_PIN;
	}
}

static int8_t gpio_get_sda(void)
{
	return (I2C1_SDA_PORT->IDR & I2C1_SDA_PIN);
}

static int8_t gpio_get_scl()
{
	return (I2C1_SCL_PORT->IDR & I2C1_SCL_PIN);
}

static void gpio_delayus(uint32_t us)
{
#if 1  /* 不用系统延时时开启这个！！*/
	volatile int32_t i;
	
	for (; us > 0; us--)
	{
		i = 30;  /* mini 17 */
		while(i--);
	}
#else
		Delayus(us);
#endif
}

int ops_i2c_bus_xfer(struct i2c_dev_device *i2c_dev, struct i2c_dev_message msgs[], unsigned int num)
{
	return(i2c_bitops_bus_xfer((struct ops_i2c_dev*)(i2c_dev->i2c_phy), msgs, num));
}

/**
  * @brief  Init I2C Driver
  * @param  None
  * @retval None
  */
void stm32f1xx_i2c_init(struct i2c_dev_device *i2c_bus)
{
	GPIO_InitTypeDef GPIO_InitStructure;										
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);		

	GPIO_InitStructure.GPIO_Pin = I2C1_SDA_PIN | I2C1_SCL_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;	  
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	   		
	GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStructure);									   				
	I2C1_SDA_PORT->BSRR = I2C1_SDA_PIN;											
	I2C1_SCL_PORT->BSRR = I2C1_SCL_PIN;
		
	/* device init */
	ops_i2c1_dev.set_sda = gpio_set_sda;
	ops_i2c1_dev.get_sda = gpio_get_sda;
	ops_i2c1_dev.set_scl = gpio_set_scl;
	ops_i2c1_dev.get_scl = gpio_get_scl;
	ops_i2c1_dev.delayus = gpio_delayus;
			
	i2c_bus->i2c_phy	 = &ops_i2c1_dev;
	i2c_bus->xfer		 = ops_i2c_bus_xfer; 
}

#if 0
void ANA_IIC_Delay(void)
{
	delay_us(SystemCoreClock, 2);
}

void ANA_IIC_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure = {0};
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
	
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	GPIO_SetBits(GPIOB, GPIO_Pin_8 | GPIO_Pin_9);
}

/**
  * @brief  I2C start
  * @param  None
  * @retval None
  */
void ANA_I2C_Start(void)
{
	ANA_SDA_OUT();
	ANA_IIC_SCL = 1;
	ANA_IIC_SDA = 1;
	ANA_IIC_Delay();
	ANA_IIC_SDA = 0;
	ANA_IIC_Delay();
	ANA_IIC_SCL = 0;
}

/**
  * @brief  I2C stop
  * @param  None
  * @retval None
  */
void ANA_I2C_Stop(void)
{
	ANA_SDA_OUT();
	ANA_IIC_SCL = 0;
	ANA_IIC_SDA = 0;
	ANA_IIC_Delay();
	ANA_IIC_SCL = 1;
	ANA_IIC_SDA = 1;
}

u8 ANA_IIC_Wait_Ack(void)
{
	u8 ucErrTime=0;
	ANA_SDA_IN();      //SDA设置为输入
	ANA_IIC_SDA = 1;
	ANA_IIC_Delay();	   
	ANA_IIC_SCL = 1;
	ANA_IIC_Delay();	 
	while(ANA_READ_SDA)
	{
		ucErrTime++;
		if(ucErrTime > 250)
		{
			ANA_I2C_Stop();
			return 1;
		}
	}
	ANA_IIC_SCL = 0;//时钟输出0
	return 0;  
}

//产生ACK应答
void ANA_IIC_Ack(void)
{
	ANA_IIC_SCL = 0;
	ANA_SDA_OUT();
	ANA_IIC_SDA = 0;
	ANA_IIC_Delay();
	ANA_IIC_SCL = 1;
	ANA_IIC_Delay();
	ANA_IIC_SCL = 0;
}

//不产生ACK应答
void ANA_IIC_NAck(void)
{
	ANA_IIC_SCL = 0;
	ANA_SDA_OUT();
	ANA_IIC_SDA = 1;
	ANA_IIC_Delay();
	ANA_IIC_SCL = 1;
	ANA_IIC_Delay();
	ANA_IIC_SCL = 0;
}

//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void ANA_IIC_Send_Byte(u8 txd)
{                        
    u8 t;   
	ANA_SDA_OUT(); 	    
    ANA_IIC_SCL = 0;//拉低时钟开始数据传输
    for(t = 0; t < 8; t++)
    {              
        ANA_IIC_SDA = (txd & 0x80)>>7;
        txd<<=1; 	  
		ANA_IIC_SCL = 1;
		ANA_IIC_Delay(); 
		ANA_IIC_SCL = 0;	
		ANA_IIC_Delay();
    }	 
}

//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
u8 ANA_IIC_Read_Byte(unsigned char ack)
{
	unsigned char i, receive = 0;
	ANA_SDA_IN();//SDA设置为输入
    for(i = 0; i < 8; i++ )
	{
        ANA_IIC_SCL = 0; 
        ANA_IIC_Delay();
		ANA_IIC_SCL = 1;
        receive <<= 1;
        if(ANA_READ_SDA)
			receive++;
		ANA_IIC_Delay(); 
    }					 
    if(!ack)
        ANA_IIC_NAck();//发送nACK
    else
        ANA_IIC_Ack(); //发送ACK   
    return receive;
}
#endif
/********************eg: stm32f1 simulate i2c end*******************/
